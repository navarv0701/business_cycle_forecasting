"""
Report generation for forecasting system
"""

import os
from datetime import datetime
from typing import Dict
import pandas as pd
import json

class ReportGenerator:
    """Generate reports from forecasting results"""
    
    def __init__(self):
        """Initialize report generator"""
        self.report_template = """
# Business Cycle Forecasting Report
Generated: {date}

## Executive Summary
- **Current Regime**: {regime}
- **6-Month Growth Outlook**: {growth_outlook}
- **6-Month Inflation Outlook**: {inflation_outlook}
- **Primary Investment Signal**: {primary_signal}

## Growth Forecasts (ISM PMI)
- 3-Month: {growth_3m:.1f}
- 6-Month: {growth_6m:.1f}
- 9-Month: {growth_9m:.1f}

## Inflation Forecasts
### PPI (Early Warning)
- 3-Month: {ppi_3m:.2f}%
- 6-Month: {ppi_6m:.2f}%

### CPI (Confirmation)
- 6-Month: {cpi_6m:.2f}%
- 9-Month: {cpi_9m:.2f}%

## Business Cycle Analysis
{regime_description}

## Investment Strategy
{investment_recommendation}

### Asset Allocation
- Equities: {equities}
- Bonds: {bonds}
- Commodities: {commodities}
- Cash: {cash}

## Risk Factors
- Growth risks: {growth_risks}
- Inflation risks: {inflation_risks}
- Policy risks: {policy_risks}

---
*This report is generated by an automated forecasting system. 
Investment decisions should incorporate additional analysis.*
        """
        
    def generate_forecast_report(self, forecasts: Dict, 
                                historical_data: pd.DataFrame,
                                output_dir: str) -> str:
        """
        Generate comprehensive forecast report
        
        Args:
            forecasts: Dictionary with all forecasts
            historical_data: Historical data for context
            output_dir: Directory to save report
            
        Returns:
            Path to saved report
        """
        os.makedirs(output_dir, exist_ok=True)
        
        # Extract values for report
        report_data = {
            'date': datetime.now().strftime('%Y-%m-%d %H:%M'),
            'regime': forecasts.get('regime', {}).get('current', 'Unknown'),
            'growth_outlook': forecasts.get('regime', {}).get('growth_outlook', 'Unknown'),
            'inflation_outlook': forecasts.get('regime', {}).get('inflation_outlook', 'Unknown'),
            'primary_signal': self._get_primary_signal(forecasts),
            
            # Growth forecasts
            'growth_3m': forecasts.get('growth', {}).get('3m', {}).get('forecast', 50),
            'growth_6m': forecasts.get('growth', {}).get('6m', {}).get('forecast', 50),
            'growth_9m': forecasts.get('growth', {}).get('9m', {}).get('forecast', 50),
            
            # Inflation forecasts
            'ppi_3m': forecasts.get('ppi', {}).get('3m', {}).get('forecast', 2.5),
            'ppi_6m': forecasts.get('ppi', {}).get('6m', {}).get('forecast', 2.5),
            'cpi_6m': forecasts.get('cpi', {}).get('6m', {}).get('forecast', 2.0),
            'cpi_9m': forecasts.get('cpi', {}).get('9m', {}).get('forecast', 2.0),
            
            # Regime details
            'regime_description': forecasts.get('regime', {}).get('description', ''),
            
            # Investment signals
            'investment_recommendation': forecasts.get('signals', {}).get('recommendation', ''),
            'equities': forecasts.get('signals', {}).get('equities', 'neutral'),
            'bonds': forecasts.get('signals', {}).get('bonds', 'neutral'),
            'commodities': forecasts.get('signals', {}).get('commodities', 'neutral'),
            'cash': forecasts.get('signals', {}).get('cash', 'neutral'),
            
            # Risk assessment
            'growth_risks': self._assess_growth_risks(forecasts),
            'inflation_risks': self._assess_inflation_risks(forecasts),
            'policy_risks': self._assess_policy_risks(forecasts)
        }
        
        # Generate report
        report_content = self.report_template.format(**report_data)
        
        # Save report
        report_path = os.path.join(output_dir, 
                                  f"forecast_report_{datetime.now().strftime('%Y%m%d')}.md")
        
        with open(report_path, 'w') as f:
            f.write(report_content)
            
        # Also save as JSON for programmatic access
        json_path = os.path.join(output_dir,
                                f"forecast_data_{datetime.now().strftime('%Y%m%d')}.json")
        
        with open(json_path, 'w') as f:
            json.dump(report_data, f, indent=2, default=str)
            
        return report_path
        
    def _get_primary_signal(self, forecasts: Dict) -> str:
        """Extract primary investment signal"""
        
        signals = forecasts.get('signals', {})
        
        # Find overweight allocations
        overweight = [asset for asset, weight in signals.items() 
                     if weight == 'overweight' and asset != 'recommendation']
        
        if overweight:
            return f"Overweight {', '.join(overweight)}"
        else:
            return "Maintain neutral allocation"
            
    def _assess_growth_risks(self, forecasts: Dict) -> str:
        """Assess growth risks"""
        
        growth_6m = forecasts.get('growth', {}).get('6m', {}).get('forecast', 50)
        
        if growth_6m < 48:
            return "High - Contraction risk"
        elif growth_6m < 50:
            return "Moderate - Below expansion threshold"
        else:
            return "Low - Expansion expected"
            
    def _assess_inflation_risks(self, forecasts: Dict) -> str:
        """Assess inflation risks"""
        
        cpi_6m = forecasts.get('cpi', {}).get('6m', {}).get('forecast', 2)
        ppi_6m = forecasts.get('ppi', {}).get('6m', {}).get('forecast', 2)
        
        if cpi_6m > 3 or ppi_6m > 4:
            return "High - Above target inflation"
        elif cpi_6m < 1:
            return "High - Deflation risk"
        else:
            return "Moderate - Near target"
            
    def _assess_policy_risks(self, forecasts: Dict) -> str:
        """Assess policy risks"""
        
        regime = forecasts.get('regime', {}).get('current', '')
        
        if regime == 'stagflation':
            return "High - Policy dilemma"
        elif regime in ['reflation', 'deflation']:
            return "Moderate - Policy action likely"
        else:
            return "Low - Supportive policy environment"